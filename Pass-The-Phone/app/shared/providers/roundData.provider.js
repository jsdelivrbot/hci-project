"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_texttospeech_1 = require("nativescript-texttospeech");
var Sqlite = require("nativescript-sqlite");
var file_system_1 = require("file-system");
var RoundDataProvider = /** @class */ (function () {
    function RoundDataProvider() {
        this.players = [];
        this.groups = [];
        this.teams = [];
        this.hasQuestions = false;
        this.answerCount = 2;
        this.playersInRound = [];
        this.groupFetch_completed = false;
        //set a default boolean for a button to animate when the tts plugin 'speaks'
        this.isSpeaking = false;
        this.hasRemainingPlayers = true;
        this.TTS = new nativescript_texttospeech_1.TNSTextToSpeech();
    }
    // Return a player that haven't played more than authorizes times
    // Returns null if no elligible player. Hence need to go to summary page
    RoundDataProvider.prototype.getRandomPlayer = function (questionAsker) {
        var elligiblePlayers = [];
        var j = 0;
        var k = 0;
        //populate elligible players array
        console.log("question asker: ".concat(questionAsker));
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].answerCount < this.answerCount) {
                console.log("question asker: ".concat(this.players[i].name));
                if (this.players[i].name != questionAsker && this.playersInRound.indexOf(this.players[i].name) < 0 && (this.currentPlayer == null || this.players[i].name != this.currentPlayer.name)) {
                    elligiblePlayers[k] = this.players[i];
                    k++;
                }
                j++;
            }
        }
        if (j == 0) {
            return null;
        }
        else {
            this.hasRemainingPlayers = j > 1;
            console.log(j > 1);
            var random = Math.floor(Math.random() * k);
            console.log("random ".concat((random).toString()));
            console.log("elligible ".concat((elligiblePlayers.length).toString()));
            this.playersInRound.push(elligiblePlayers[random].name);
            if (this.playersInRound.length == this.players.length) {
                console.log("round done");
                this.playersInRound = [];
            }
            return elligiblePlayers[random];
        }
    };
    //trouver un ami pour demander une question, code beurk
    RoundDataProvider.prototype.getRandomFriend = function (player) {
        var friends = [];
        player.team.players.forEach(function (p) {
            if (p.name != player.name) {
                friends.push(p);
            }
        });
        var index = Math.floor(Math.random() * friends.length);
        if (index > 0) {
            return friends[index].name;
        }
        else {
            return friends[0].name;
        }
    };
    RoundDataProvider.prototype.speak = function (text) {
        var _this = this;
        this.isSpeaking = true;
        var speakOptions = {
            text: text,
            speakRate: 0.5,
            pitch: 1,
            queue: true,
            finishedCallback: (function () {
                _this.isSpeaking = false;
            })
        };
        this.TTS.speak(speakOptions);
    };
    RoundDataProvider.prototype.stopSpeaking = function () {
        this.isSpeaking = false;
        this.TTS.destroy();
    };
    RoundDataProvider.prototype.calculateTeamCount = function () {
        var teamCount = 0;
        if ((this.players.length % 2 == 0 || this.players.length % 3 == 0) && this.players.length > 3) {
            //team creation of 2 or 3 player is possible
            if (this.players.length % 3 == 0) {
                //teams of 3 will be created
                teamCount = this.players.length / 3;
            }
            else {
                //teams of 2 will be created
                teamCount = this.players.length / 2;
            }
            return teamCount;
        }
        else {
            // no team creation is possible
            return 0;
        }
    };
    RoundDataProvider.prototype.getProgress = function () {
        var questionsAnswered = 0;
        this.players.forEach(function (player) {
            questionsAnswered += player.answerCount;
        });
        return (questionsAnswered / (this.answerCount * this.players.length)) * 100;
    };
    RoundDataProvider.prototype.getPlayersInTeam = function (team) {
        return team.players;
    };
    RoundDataProvider.prototype.getExistingAndRemainingPlayers = function (team) {
        var noTeamPlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].team == null /*|| this.players[i].team == team*/) {
                noTeamPlayers[j] = this.players[i];
                j++;
            }
            else if (this.players[i].team.name == team.name) {
                this.players[i].isSelected = true;
                noTeamPlayers[j] = this.players[i];
                j++;
            }
        }
        return noTeamPlayers;
    };
    RoundDataProvider.prototype.defineQuestionAsker = function () {
        this.questionAsker;
        return this.questionAsker;
    };
    RoundDataProvider.prototype.clearData = function () {
        console.log("Clearing Data...");
        this.triviaQuestion = null;
        this.currentPlayer = null;
        this.group = null;
        for (var i = 0; i < this.players.length; i++) {
            delete this.players[i];
        }
        for (var i = 0; i < this.teams.length; i++) {
            delete this.teams[i];
        }
        this.players = [];
        this.teams = [];
        this.subjectId = "";
        this.gameMode = "";
    };
    RoundDataProvider.prototype.clearGroups = function () {
        for (var i = 0; i < this.groups.length; i++) {
            delete this.groups[i];
        }
        this.groups = [];
    };
    RoundDataProvider.prototype.saveGroups = function () {
        console.log("Saving groups...");
        var str = JSON.stringify(this.groups, null, 4);
        var folderName = "data";
        var fileName = "data.json";
        var documents = file_system_1.knownFolders.documents();
        var folder = documents.getFolder(folderName);
        var file = folder.getFile(fileName);
        file.writeText(str)
            .then(function (result) {
            file.readText()
                .then(function (res) {
                var successMessage = "Successfully saved in " + file.path;
                console.log(successMessage);
                console.log(": " + res);
            });
        }).catch(function (err) {
            console.log(err);
        });
    };
    RoundDataProvider.prototype.loadGroups = function () {
        var _this = this;
        console.log("Loading groups...");
        return new Promise(function (resolve, reject) {
            _this.clearGroups();
            var folderName = "data";
            var fileName = "data.json";
            var documents = file_system_1.knownFolders.documents();
            var folder = documents.getFolder(folderName);
            var file = folder.getFile(fileName);
            file.readText().then(function (res) {
                var writtenContent = res;
                console.log("Successful Read: " + writtenContent);
                if (writtenContent == "") {
                    _this.saveGroups();
                    resolve("{}");
                }
                var data = JSON.parse(writtenContent);
                console.log("length: " + data.length);
                for (var i = 0; i < data.length; i++) {
                    _this.groups.push(data[i]);
                }
                resolve(writtenContent);
            }).catch(function (err) {
                console.log(err.stack);
                reject(err);
            });
        });
    };
    RoundDataProvider = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], RoundDataProvider);
    return RoundDataProvider;
}());
exports.RoundDataProvider = RoundDataProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmREYXRhLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91bmREYXRhLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLHVFQUEwRTtBQUMxRSxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUM1QywyQ0FBeUQ7QUFXekQ7SUFtQ0k7UUE1Qk8sWUFBTyxHQUFjLEVBQUUsQ0FBQztRQUN4QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBQ3RCLFVBQUssR0FBWSxFQUFFLENBQUM7UUFDcEIsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFZNUIsZ0JBQVcsR0FBVSxDQUFDLENBQUM7UUFFekIsbUJBQWMsR0FBYSxFQUFFLENBQUE7UUFJN0IseUJBQW9CLEdBQVksS0FBSyxDQUFDO1FBRTdDLDRFQUE0RTtRQUM1RSxlQUFVLEdBQVksS0FBSyxDQUFDO1FBUXJCLHdCQUFtQixHQUFZLElBQUksQ0FBQztRQUh2QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksMkNBQWUsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFJRCxpRUFBaUU7SUFDakUsd0VBQXdFO0lBQ2pFLDJDQUFlLEdBQXRCLFVBQXVCLGFBQWE7UUFDaEMsSUFBSSxnQkFBZ0IsR0FBYyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1Ysa0NBQWtDO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUE7UUFDckQsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFP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LGNBQWMsQ0FBQyxDQUFDO2dCQUVqRCxFQUFFLENBQUEsQ0FBQyxjQUFjLElBQUUsRUFBRSxDQUFDLENBQUEsQ0FBQztvQkFDbkIsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xCLENBQUM7Z0JBRUQsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDakMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLENBQUM7Z0JBRUQsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTVCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEdBQUc7Z0JBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQXRRVSxpQkFBaUI7UUFEN0IsaUJBQVUsRUFBRTs7T0FDQSxpQkFBaUIsQ0EwUTdCO0lBQUQsd0JBQUM7Q0FBQSxBQTFRRCxJQTBRQztBQTFRWSw4Q0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUTlNUZXh0VG9TcGVlY2gsIFNwZWFrT3B0aW9ucyB9IGZyb20gJ25hdGl2ZXNjcmlwdC10ZXh0dG9zcGVlY2gnO1xudmFyIFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpO1xuaW1wb3J0IHsga25vd25Gb2xkZXJzLCBGaWxlLCBGb2xkZXIgfSBmcm9tIFwiZmlsZS1zeXN0ZW1cIjtcblxuXG5pbXBvcnQge1RyaXZpYVF1ZXN0aW9ufSBmcm9tIFwiLi4vdHJpdmlhUXVlc3Rpb25cIjtcbmltcG9ydCB7VGVhbX0gZnJvbSBcIi4uL3RlYW1cIjtcbmltcG9ydCB7UGxheWVyfSBmcm9tIFwiLi4vcGxheWVyXCI7XG5pbXBvcnQge0dyb3VwfSBmcm9tIFwiLi4vZ3JvdXBcIjtcblxuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb3VuZERhdGFQcm92aWRlciB7XG4gICAgXG4gICAgcHVibGljIHRyaXZpYVF1ZXN0aW9uOiBUcml2aWFRdWVzdGlvbjtcbiAgICBwdWJsaWMgY3VycmVudFBsYXllcjogUGxheWVyO1xuICAgIHB1YmxpYyBxdWVzdGlvbkFza2VyOiBQbGF5ZXI7XG4gICAgXG4gICAgcHVibGljIGdyb3VwOiBHcm91cDtcbiAgICBwdWJsaWMgcGxheWVycyA6IFBsYXllcltdID0gW107XG4gICAgcHVibGljIGdyb3VwcyA6IEdyb3VwW10gPSBbXTsgICAgXG4gICAgcHVibGljIHRlYW1zIDogVGVhbVtdID0gW107XG4gICAgcHVibGljIGhhc1F1ZXN0aW9uczogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gICAgcHVibGljIHF1ZXN0aW9uczpzdHJpbmdbXTtcbiAgICBwdWJsaWMgYW5zd2Vyczpbc3RyaW5nW11dO1xuICAgIHB1YmxpYyBzdWJqZWN0SWQ6IHN0cmluZztcbiAgICBwdWJsaWMgc3ViamVjdE5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgY2F0ZWdvcnk6c3RyaW5nO1xuICAgIHB1YmxpYyB0eXBlOnN0cmluZztcbiAgICBwdWJsaWMgZGlmZmljdWx0eTpzdHJpbmc7XG4gICAgXG4gICAgcHVibGljIGdhbWVNb2RlOiBzdHJpbmc7XG4gICAgXG4gICAgcmVhZG9ubHkgYW5zd2VyQ291bnQ6bnVtYmVyID0gMjtcblxuICAgIHB1YmxpYyBwbGF5ZXJzSW5Sb3VuZDogc3RyaW5nW10gPSBbXVxuICAgIFxuICAgIHByaXZhdGUgZGF0YWJhc2U6IGFueTtcblxuICAgIHB1YmxpYyBncm91cEZldGNoX2NvbXBsZXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLy9zZXQgYSBkZWZhdWx0IGJvb2xlYW4gZm9yIGEgYnV0dG9uIHRvIGFuaW1hdGUgd2hlbiB0aGUgdHRzIHBsdWdpbiAnc3BlYWtzJ1xuICAgIGlzU3BlYWtpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIFRUUzogVE5TVGV4dFRvU3BlZWNoO1xuICAgIFxuICAgIFxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5UVFMgPSBuZXcgVE5TVGV4dFRvU3BlZWNoKCk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBoYXNSZW1haW5pbmdQbGF5ZXJzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8vIFJldHVybiBhIHBsYXllciB0aGF0IGhhdmVuJ3QgcGxheWVkIG1vcmUgdGhhbiBhdXRob3JpemVzIHRpbWVzXG4gICAgLy8gUmV0dXJucyBudWxsIGlmIG5vIGVsbGlnaWJsZSBwbGF5ZXIuIEhlbmNlIG5lZWQgdG8gZ28gdG8gc3VtbWFyeSBwYWdlXG4gICAgcHVibGljIGdldFJhbmRvbVBsYXllcihxdWVzdGlvbkFza2VyKXtcbiAgICAgICAgdmFyIGVsbGlnaWJsZVBsYXllcnMgOiBQbGF5ZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgLy9wb3B1bGF0ZSBlbGxpZ2libGUgcGxheWVycyBhcnJheVxuICAgICAgICBjb25zb2xlLmxvZyhcInF1ZXN0aW9uIGFza2VyOiBcIi5jb25jYXQocXVlc3Rpb25Bc2tlcikpXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMucGxheWVycy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc1tpXS5hbnN3ZXJDb3VudDx0aGlzLmFuc3dlckNvdW50KXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInF1ZXN0aW9uIGFza2VyOiBcIi5jb25jYXQodGhpcy5wbGF5ZXJzW2ldLm5hbWUpKVxuICAgICAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc1tpXS5uYW1lICE9IHF1ZXN0aW9uQXNrZXIgJiYgdGhpcy5wbGF5ZXJzSW5Sb3VuZC5pbmRleE9mKHRoaXMucGxheWVyc1tpXS5uYW1lKSA8IDAgJiYgKHRoaXMuY3VycmVudFBsYXllciA9PSBudWxsIHx8IHRoaXMucGxheWVyc1tpXS5uYW1lICE9IHRoaXMuY3VycmVudFBsYXllci5uYW1lKSl7XG4gICAgICAgICAgICAgICAgICAgIGVsbGlnaWJsZVBsYXllcnNba109dGhpcy5wbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihqID09IDApe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5oYXNSZW1haW5pbmdQbGF5ZXJzID0gaiA+IDE7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhqID4gMSlcbiAgICAgICAgICAgIGxldCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBrKTsgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJhbmRvbSBcIi5jb25jYXQoKHJhbmRvbSkudG9TdHJpbmcoKSkpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVsbGlnaWJsZSBcIi5jb25jYXQoKGVsbGlnaWJsZVBsYXllcnMubGVuZ3RoKS50b1N0cmluZygpKSlcbiAgICAgICAgICAgIHRoaXMucGxheWVyc0luUm91bmQucHVzaChlbGxpZ2libGVQbGF5ZXJzW3JhbmRvbV0ubmFtZSlcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc0luUm91bmQubGVuZ3RoID09IHRoaXMucGxheWVycy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicm91bmQgZG9uZVwiKVxuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyc0luUm91bmQgPSBbXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsbGlnaWJsZVBsYXllcnNbcmFuZG9tXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vdHJvdXZlciB1biBhbWkgcG91ciBkZW1hbmRlciB1bmUgcXVlc3Rpb24sIGNvZGUgYmV1cmtcbiAgICBwdWJsaWMgZ2V0UmFuZG9tRnJpZW5kKHBsYXllcjogUGxheWVyKXtcbiAgICAgICAgbGV0IGZyaWVuZHMgPSBbXTtcbiAgICAgICAgcGxheWVyLnRlYW0ucGxheWVycy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgaWYocC5uYW1lICE9IHBsYXllci5uYW1lKXtcbiAgICAgICAgICAgICAgICBmcmllbmRzLnB1c2gocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqZnJpZW5kcy5sZW5ndGgpO1xuICAgICAgICBpZihpbmRleCA+IDApe1xuICAgICAgICAgICAgcmV0dXJuIGZyaWVuZHNbaW5kZXhdLm5hbWU7XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgIHJldHVybiBmcmllbmRzWzBdLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3BlYWsodGV4dDogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5pc1NwZWFraW5nID0gdHJ1ZTtcbiAgICAgICAgbGV0IHNwZWFrT3B0aW9uczogU3BlYWtPcHRpb25zID0ge1xuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIHNwZWFrUmF0ZTogMC41LFxuICAgICAgICAgICAgcGl0Y2g6IDEsXG4gICAgICAgICAgICBxdWV1ZTogdHJ1ZSxcbiAgICAgICAgICAgIGZpbmlzaGVkQ2FsbGJhY2s6ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NwZWFraW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KSAgXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5UVFMuc3BlYWsoc3BlYWtPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcFNwZWFraW5nKCl7XG4gICAgICAgIHRoaXMuaXNTcGVha2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLlRUUy5kZXN0cm95KCk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBjYWxjdWxhdGVUZWFtQ291bnQoKXtcbiAgICAgICAgbGV0IHRlYW1Db3VudCA9IDA7XG4gICAgICAgIGlmKCAodGhpcy5wbGF5ZXJzLmxlbmd0aCUyID09IDAgfHwgdGhpcy5wbGF5ZXJzLmxlbmd0aCUzID09IDAgKSAmJiB0aGlzLnBsYXllcnMubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgLy90ZWFtIGNyZWF0aW9uIG9mIDIgb3IgMyBwbGF5ZXIgaXMgcG9zc2libGVcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVycy5sZW5ndGglMyA9PSAwICl7XG4gICAgICAgICAgICAgICAgLy90ZWFtcyBvZiAzIHdpbGwgYmUgY3JlYXRlZFxuICAgICAgICAgICAgICAgIHRlYW1Db3VudCA9IHRoaXMucGxheWVycy5sZW5ndGgvMztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIC8vdGVhbXMgb2YgMiB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICB0ZWFtQ291bnQgPSB0aGlzLnBsYXllcnMubGVuZ3RoLzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVhbUNvdW50O1xuICAgICAgICAgICAgXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLy8gbm8gdGVhbSBjcmVhdGlvbiBpcyBwb3NzaWJsZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGdldFByb2dyZXNzKCl7XG4gICAgICAgIHZhciBxdWVzdGlvbnNBbnN3ZXJlZCA6IG51bWJlciA9IDA7XG4gICAgICAgIHRoaXMucGxheWVycy5mb3JFYWNoKHBsYXllciA9PntcbiAgICAgICAgICAgIHF1ZXN0aW9uc0Fuc3dlcmVkICs9IHBsYXllci5hbnN3ZXJDb3VudDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAocXVlc3Rpb25zQW5zd2VyZWQvKHRoaXMuYW5zd2VyQ291bnQgKiB0aGlzLnBsYXllcnMubGVuZ3RoKSkgKiAxMDA7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBsYXllcnNJblRlYW0odGVhbTogVGVhbSk6IFBsYXllcltde1xuICAgICAgICByZXR1cm4gdGVhbS5wbGF5ZXJzO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0RXhpc3RpbmdBbmRSZW1haW5pbmdQbGF5ZXJzKHRlYW06IFRlYW0pOiBQbGF5ZXJbXXtcbiAgICAgICAgdmFyIG5vVGVhbVBsYXllcnMgOiBQbGF5ZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIFxuICAgICAgICAvL3BvcHVsYXRlIGVsbGlnaWJsZSBwbGF5ZXJzIGFycmF5XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMucGxheWVycy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc1tpXS50ZWFtID09IG51bGwgLyp8fCB0aGlzLnBsYXllcnNbaV0udGVhbSA9PSB0ZWFtKi8gKXtcbiAgICAgICAgICAgICAgICBub1RlYW1QbGF5ZXJzW2pdPXRoaXMucGxheWVyc1tpXTtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5wbGF5ZXJzW2ldLnRlYW0ubmFtZSA9PSAgdGVhbS5uYW1lKXtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllcnNbaV0uaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbm9UZWFtUGxheWVyc1tqXT10aGlzLnBsYXllcnNbaV07XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbm9UZWFtUGxheWVycztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVmaW5lUXVlc3Rpb25Bc2tlcigpe1xuXG4gICAgICAgIHRoaXMucXVlc3Rpb25Bc2tlcjtcblxuICAgICAgICByZXR1cm4gdGhpcy5xdWVzdGlvbkFza2VyO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBwdWJsaWMgY2xlYXJEYXRhKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYXJpbmcgRGF0YS4uLlwiKTtcbiAgICAgICAgdGhpcy50cml2aWFRdWVzdGlvbiA9IG51bGw7IFxuICAgICAgICB0aGlzLmN1cnJlbnRQbGF5ZXI9IG51bGw7XG4gICAgICAgIHRoaXMuZ3JvdXA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDx0aGlzLnBsYXllcnMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5wbGF5ZXJzW2ldO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDx0aGlzLnRlYW1zLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudGVhbXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucGxheWVycz0gW107XG4gICAgICAgIHRoaXMudGVhbXM9IFtdO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdWJqZWN0SWQ9IFwiXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmdhbWVNb2RlPSBcIlwiO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2xlYXJHcm91cHMoKXtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8dGhpcy5ncm91cHMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5ncm91cHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyb3Vwcz0gW107XG4gICAgfVxuXG4gIHB1YmxpYyBzYXZlR3JvdXBzKCl7XG4gICAgY29uc29sZS5sb2coXCJTYXZpbmcgZ3JvdXBzLi4uXCIpO1xuICAgIHZhciBzdHIgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdyb3VwcywgbnVsbCwgNCk7XG5cbiAgICBsZXQgZm9sZGVyTmFtZSA9IFwiZGF0YVwiO1xuICAgIGxldCBmaWxlTmFtZSA9IFwiZGF0YS5qc29uXCI7XG5cbiAgICBsZXQgZG9jdW1lbnRzID0ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xuICAgIGxldCBmb2xkZXIgPSBkb2N1bWVudHMuZ2V0Rm9sZGVyKGZvbGRlck5hbWUpO1xuICAgIGxldCBmaWxlID0gZm9sZGVyLmdldEZpbGUoZmlsZU5hbWUpO1xuICBcbiAgICBmaWxlLndyaXRlVGV4dChzdHIpXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICBmaWxlLnJlYWRUZXh0KClcbiAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgIGxldCBzdWNjZXNzTWVzc2FnZSA9IFwiU3VjY2Vzc2Z1bGx5IHNhdmVkIGluIFwiICsgZmlsZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN1Y2Nlc3NNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIjogXCIrIHJlcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBsb2FkR3JvdXBzKCk6IFByb21pc2UgPGFueT4ge1xuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBncm91cHMuLi5cIik7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KSA9PiB7XG5cbiAgICAgICAgdGhpcy5jbGVhckdyb3VwcygpO1xuICAgICAgICBcbiAgICAgICAgbGV0IGZvbGRlck5hbWUgPSBcImRhdGFcIjtcbiAgICAgICAgbGV0IGZpbGVOYW1lID0gXCJkYXRhLmpzb25cIjtcbiAgICAgICAgbGV0IGRvY3VtZW50cyA9IGtub3duRm9sZGVycy5kb2N1bWVudHMoKTtcbiAgICAgICAgbGV0IGZvbGRlciA9IGRvY3VtZW50cy5nZXRGb2xkZXIoZm9sZGVyTmFtZSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgZmlsZSA9IGZvbGRlci5nZXRGaWxlKGZpbGVOYW1lKTtcbiAgICBcbiAgICAgICAgZmlsZS5yZWFkVGV4dCgpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGxldCB3cml0dGVuQ29udGVudCA9IHJlcztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bCBSZWFkOiBcIisgd3JpdHRlbkNvbnRlbnQpO1xuXG4gICAgICAgICAgICBpZih3cml0dGVuQ29udGVudD09XCJcIil7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShcInt9XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2Uod3JpdHRlbkNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJsZW5ndGg6IFwiK2RhdGEubGVuZ3RoKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwO2kgPCBkYXRhLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKGRhdGFbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXNvbHZlKHdyaXR0ZW5Db250ZW50KTtcbiAgICBcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuICAgIFxuICBcblxufSJdfQ==