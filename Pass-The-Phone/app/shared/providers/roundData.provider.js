"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_texttospeech_1 = require("nativescript-texttospeech");
var Sqlite = require("nativescript-sqlite");
var file_system_1 = require("file-system");
var RoundDataProvider = /** @class */ (function () {
    function RoundDataProvider() {
        this.players = [];
        this.groups = [];
        this.teams = [];
        this.hasQuestions = false;
        this.answerCount = 2;
        this.playersInRound = [];
        this.groupFetch_completed = false;
        //set a default boolean for a button to animate when the tts plugin 'speaks'
        this.isSpeaking = false;
        this.hasRemainingPlayers = true;
        this.TTS = new nativescript_texttospeech_1.TNSTextToSpeech();
    }
    // Return a player that haven't played more than authorizes times
    // Returns null if no elligible player. Hence need to go to summary page
    RoundDataProvider.prototype.getRandomPlayer = function (questionAsker) {
        var elligiblePlayers = [];
        var j = 0;
        var k = 0;
        //populate elligible players array
        console.log("question asker: ".concat(questionAsker));
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].answerCount < this.answerCount) {
                console.log("question asker: ".concat(this.players[i].name));
                if (this.players[i].name != questionAsker && this.playersInRound.indexOf(this.players[i].name) < 0 && (this.currentPlayer == null || this.players[i].name != this.currentPlayer.name)) {
                    elligiblePlayers[k] = this.players[i];
                    k++;
                }
                else if (this.players[i].name != questionAsker && this.players.length == 2) {
                    elligiblePlayers[k] = this.players[i];
                    k++;
                }
                j++;
            }
        }
        if (j == 0) {
            return null;
        }
        else {
            this.hasRemainingPlayers = j > 1;
            console.log(j > 1);
            var random = Math.floor(Math.random() * k);
            console.log("random ".concat((random).toString()));
            console.log("elligible ".concat((elligiblePlayers.length).toString()));
            this.playersInRound.push(elligiblePlayers[random].name);
            if (this.playersInRound.length == this.players.length) {
                console.log("round done");
                this.playersInRound = [];
            }
            return elligiblePlayers[random];
        }
    };
    //trouver un ami pour demander une question, code beurk
    RoundDataProvider.prototype.getRandomFriend = function (player) {
        var friends = [];
        player.team.players.forEach(function (p) {
            if (p.name != player.name) {
                friends.push(p);
            }
        });
        var index = Math.floor(Math.random() * friends.length);
        if (index > 0) {
            return friends[index].name;
        }
        else {
            return friends[0].name;
        }
    };
    RoundDataProvider.prototype.speak = function (text) {
        var _this = this;
        this.isSpeaking = true;
        var speakOptions = {
            text: text,
            speakRate: 0.5,
            pitch: 1,
            queue: true,
            finishedCallback: (function () {
                _this.isSpeaking = false;
            })
        };
        this.TTS.speak(speakOptions);
    };
    RoundDataProvider.prototype.stopSpeaking = function () {
        this.isSpeaking = false;
        this.TTS.destroy();
    };
    RoundDataProvider.prototype.calculateTeamCount = function () {
        var teamCount = 0;
        if ((this.players.length % 2 == 0 || this.players.length % 3 == 0) && this.players.length > 3) {
            //team creation of 2 or 3 player is possible
            if (this.players.length % 3 == 0) {
                //teams of 3 will be created
                teamCount = this.players.length / 3;
            }
            else {
                //teams of 2 will be created
                teamCount = this.players.length / 2;
            }
            return teamCount;
        }
        else {
            // no team creation is possible
            return 0;
        }
    };
    RoundDataProvider.prototype.getProgress = function () {
        var questionsAnswered = 0;
        this.players.forEach(function (player) {
            questionsAnswered += player.answerCount;
        });
        return (questionsAnswered / (this.answerCount * this.players.length)) * 100;
    };
    RoundDataProvider.prototype.getPlayersInTeam = function (team) {
        return team.players;
    };
    RoundDataProvider.prototype.getExistingAndRemainingPlayers = function (team) {
        var noTeamPlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].team == null /*|| this.players[i].team == team*/) {
                noTeamPlayers[j] = this.players[i];
                j++;
            }
            else if (this.players[i].team.name == team.name) {
                this.players[i].isSelected = true;
                noTeamPlayers[j] = this.players[i];
                j++;
            }
        }
        return noTeamPlayers;
    };
    RoundDataProvider.prototype.defineQuestionAsker = function () {
        this.questionAsker;
        return this.questionAsker;
    };
    RoundDataProvider.prototype.clearData = function () {
        console.log("Clearing Data...");
        this.triviaQuestion = null;
        this.currentPlayer = null;
        this.group = null;
        for (var i = 0; i < this.players.length; i++) {
            delete this.players[i];
        }
        for (var i = 0; i < this.teams.length; i++) {
            delete this.teams[i];
        }
        this.players = [];
        this.teams = [];
        this.subjectId = "";
        this.gameMode = "";
    };
    RoundDataProvider.prototype.clearGroups = function () {
        for (var i = 0; i < this.groups.length; i++) {
            delete this.groups[i];
        }
        this.groups = [];
    };
    RoundDataProvider.prototype.saveGroups = function () {
        console.log("Saving groups...");
        var str = JSON.stringify(this.groups, null, 4);
        var folderName = "data";
        var fileName = "data.json";
        var documents = file_system_1.knownFolders.documents();
        var folder = documents.getFolder(folderName);
        var file = folder.getFile(fileName);
        file.writeText(str)
            .then(function (result) {
            file.readText()
                .then(function (res) {
                var successMessage = "Successfully saved in " + file.path;
                console.log(successMessage);
                console.log(": " + res);
            });
        }).catch(function (err) {
            console.log(err);
        });
    };
    RoundDataProvider.prototype.checkForData = function (callback) {
        var folderName = "data";
        var fileName = "data.json";
        var documents = file_system_1.knownFolders.documents();
        var folder = documents.getFolder(folderName);
        var file = folder.getFile(fileName);
        console.log("check");
        file.readText().then(function (res) {
            console.log(res.length);
            console.log(res);
            var data = JSON.parse(res);
            callback(data.length <= 0);
        }).catch(function (err) {
            console.log(err.stack);
            callback(true);
        });
    };
    RoundDataProvider.prototype.loadGroups = function () {
        var _this = this;
        console.log("Loading groups...");
        return new Promise(function (resolve, reject) {
            _this.clearGroups();
            var folderName = "data";
            var fileName = "data.json";
            var documents = file_system_1.knownFolders.documents();
            var folder = documents.getFolder(folderName);
            var file = folder.getFile(fileName);
            file.readText().then(function (res) {
                var writtenContent = res;
                console.log("Successful Read: " + writtenContent);
                if (writtenContent == "") {
                    _this.saveGroups();
                    resolve("{}");
                }
                var data = JSON.parse(writtenContent);
                console.log("length: " + data.length);
                for (var i = 0; i < data.length; i++) {
                    _this.groups.push(data[i]);
                }
                resolve(writtenContent);
            }).catch(function (err) {
                console.log(err.stack);
                reject(err);
            });
        });
    };
    RoundDataProvider = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], RoundDataProvider);
    return RoundDataProvider;
}());
exports.RoundDataProvider = RoundDataProvider;
//# sourceMappingURL=data:application/json;base64,