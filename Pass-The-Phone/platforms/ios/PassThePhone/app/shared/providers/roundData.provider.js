"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var RoundDataProvider = /** @class */ (function () {
    function RoundDataProvider() {
        // (new Sqlite("passthephone.db")).then(db => {
        //     db.execSQL("CREATE TABLE IF NOT EXISTS players (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, group_id TEXT)").then(id => {
        //         this.database = db;
        //     }, error => {
        //         console.log("CREATE TABLE ERROR", error);
        //     });
        // }, error => {
        //     console.log("OPEN DB ERROR", error);
        // });
        this.players = [];
        this.groups = [];
        this.teams = [];
        this.answerCount = 2;
        this.playersInRound = [];
        this.groupFetch_completed = false;
        this.hasRemainingPlayers = true;
        // (new Sqlite("passthephone.db")).then(db => {
        //     db.execSQL("CREATE TABLE IF NOT EXISTS groups (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)").then(id => {
        //         this.database = db;
        //     }, error => {
        //         console.log("CREATE TABLE ERROR", error);
        //     });
        // }, error => {
        //     console.log("OPEN DB ERROR", error);
        // });
    }
    // Return a player that haven't played more than authorizes times
    // Returns null if no elligible player. Hence need to go to summary page
    RoundDataProvider.prototype.getRandomPlayer = function (questionAsker) {
        var elligiblePlayers = [];
        var j = 0;
        var k = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].answerCount < this.answerCount) {
                if (this.players[i].name != questionAsker && this.playersInRound.indexOf(this.players[i].name) < 0 && (this.currentPlayer == null || this.players[i].name != this.currentPlayer.name)) {
                    elligiblePlayers[k] = this.players[i];
                    k++;
                }
                j++;
            }
        }
        if (j == 0) {
            return null;
        }
        else {
            this.hasRemainingPlayers = j > 1;
            console.log(j > 1);
            var random = Math.floor(Math.random() * k);
            this.playersInRound.push(elligiblePlayers[random].name);
            if (this.playersInRound.length == this.players.length) {
                console.log("round done");
                this.playersInRound = [];
            }
            return elligiblePlayers[random];
        }
    };
    RoundDataProvider.prototype.calculateTeamCount = function () {
        var teamCount = 0;
        if ((this.players.length % 2 == 0 || this.players.length % 3 == 0) && this.players.length > 3) {
            //team creation of 2 or 3 player is possible
            if (this.players.length % 3 == 0) {
                //teams of 3 will be created
                teamCount = this.players.length / 3;
            }
            else {
                //teams of 2 will be created
                teamCount = this.players.length / 2;
            }
            return teamCount;
        }
        else {
            // no team creation is possible
            return 0;
        }
    };
    RoundDataProvider.prototype.getPlayersInTeam = function (team) {
        return team.players;
    };
    RoundDataProvider.prototype.getExistingAndRemainingPlayers = function (team) {
        var noTeamPlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].team == null /*|| this.players[i].team == team*/) {
                noTeamPlayers[j] = this.players[i];
                j++;
            }
            else if (this.players[i].team.name == team.name) {
                this.players[i].isSelected = true;
                noTeamPlayers[j] = this.players[i];
                j++;
            }
        }
        return noTeamPlayers;
    };
    RoundDataProvider.prototype.clearData = function () {
        console.log("Clearing Data...");
        this.triviaQuestion = null;
        this.currentPlayer = null;
        this.group = null;
        for (var i = 0; i < this.players.length; i++) {
            delete this.players[i];
        }
        for (var i = 0; i < this.teams.length; i++) {
            delete this.teams[i];
        }
        this.players = [];
        this.teams = [];
        this.subjectId = "";
        this.gameMode = "";
    };
    RoundDataProvider = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], RoundDataProvider);
    return RoundDataProvider;
}());
exports.RoundDataProvider = RoundDataProvider;
//# sourceMappingURL=data:application/json;base64,