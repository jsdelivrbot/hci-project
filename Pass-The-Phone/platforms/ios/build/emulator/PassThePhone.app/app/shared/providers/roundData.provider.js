"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var RoundDataProvider = /** @class */ (function () {
    function RoundDataProvider() {
        var _this = this;
        this.players = [];
        this.groups = [];
        this.teams = [];
        this.answerCount = 2;
        this.playersInRound = [];
        this.hasRemainingPlayers = true;
        (new Sqlite("passthephone.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS players (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, group_id TEXT)").then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
        (new Sqlite("passthephone.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS groups (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)").then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    // Return a player that haven't played more than authorizes times
    // Returns null if no elligible player. Hence need to go to summary page
    RoundDataProvider.prototype.getRandomPlayer = function () {
        var elligiblePlayers = [];
        var j = 0;
        var k = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].answerCount < this.answerCount) {
                if (this.playersInRound.indexOf(this.players[i].name) < 0 && (this.currentPlayer == null || this.players[i].name != this.currentPlayer.name)) {
                    elligiblePlayers[k] = this.players[i];
                    k++;
                }
                j++;
            }
        }
        if (j == 0) {
            return null;
        }
        else {
            this.hasRemainingPlayers = j > 1;
            console.log(j > 1);
            var random = Math.floor(Math.random() * k);
            this.playersInRound.push(elligiblePlayers[random].name);
            if (this.playersInRound.length == this.players.length) {
                console.log("round done");
                this.playersInRound = [];
            }
            return elligiblePlayers[random];
        }
    };
    RoundDataProvider.prototype.calculateTeamCount = function () {
        var teamCount = 0;
        if ((this.players.length % 2 == 0 || this.players.length % 3 == 0) && this.players.length > 3) {
            //team creation of 2 or 3 player is possible
            if (this.players.length % 3 == 0) {
                //teams of 3 will be created
                teamCount = this.players.length / 3;
            }
            else {
                //teams of 2 will be created
                teamCount = this.players.length / 2;
            }
            return teamCount;
        }
        else {
            // no team creation is possible
            return 0;
        }
    };
    RoundDataProvider.prototype.getPlayersInTeam = function (team) {
        return team.players;
    };
    RoundDataProvider.prototype.getExistingAndRemainingPlayers = function (team) {
        var noTeamPlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].team == null /*|| this.players[i].team == team*/) {
                noTeamPlayers[j] = this.players[i];
                j++;
            }
            else if (this.players[i].team.name == team.name) {
                this.players[i].isSelected = true;
                noTeamPlayers[j] = this.players[i];
                j++;
            }
        }
        return noTeamPlayers;
    };
    RoundDataProvider.prototype.clearData = function () {
        console.log("Clearing Data...");
        this.triviaQuestion = null;
        this.currentPlayer = null;
        this.group = null;
        for (var i = 0; i < this.players.length; i++) {
            delete this.players[i];
        }
        for (var i = 0; i < this.teams.length; i++) {
            delete this.teams[i];
        }
        this.players = [];
        this.teams = [];
        this.subjectId = "";
        this.gameMode = "";
    };
    RoundDataProvider.prototype.clearGroups = function () {
        for (var i = 0; i < this.groups.length; i++) {
            delete this.groups[i];
        }
        this.groups = [];
    };
    RoundDataProvider.prototype.insert_group = function (group) {
        var _this = this;
        this.database.execSQL("INSERT INTO groups (name) VALUES (?)", [group.name]).then(function (id) {
            console.log("INSERT RESULT", id);
            group.id = id;
            // this.fetch();
            _this.insert_group_players(group);
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    RoundDataProvider.prototype.insert_group_players = function (group) {
        var insert_players = group.players;
        for (var _i = 0, insert_players_1 = insert_players; _i < insert_players_1.length; _i++) {
            var player = insert_players_1[_i];
            this.database.execSQL("INSERT INTO players (name, group_id) VALUES (?, ?)", [player.name, group.id]).then(function (id) {
                console.log("INSERT RESULT", id);
                // this.fetch();
            }, function (error) {
                console.log("INSERT ERROR", error);
            });
        }
    };
    RoundDataProvider.prototype.fetch_groups = function () {
        //TODO. Fetch recostructs objects based on id.
        var _this = this;
        console.log("fetching groups...");
        // var that = this;
        this.database.all("SELECT * FROM groups").then(function (rows) {
            _this.groups = [];
            for (var row in rows) {
                _this.groups.push({
                    "id": rows[row][0],
                    "name": rows[row][1],
                    "playersName": "",
                    "players": null
                });
                var lastGroup = _this.groups[_this.groups.length - 1];
                console.log("new group: " + lastGroup.name);
                lastGroup.players = _this.fetch_group_players(lastGroup);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
            return false;
        });
        return true;
    };
    RoundDataProvider.prototype.fetch_group_players = function (group) {
        var group_players = [];
        console.log("Fetching group players: " + group.id);
        this.database.all("SELECT * FROM players where id = 1").then(function (rows) {
            group_players = [];
            for (var row in rows) {
                group_players.push({
                    "id": rows[row][0],
                    "name": rows[row][1],
                    "answerCount": 0,
                    "runningPointsTotal": 0,
                    "team": null,
                    "isSelected": false
                });
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
        return group_players;
    };
    RoundDataProvider = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], RoundDataProvider);
    return RoundDataProvider;
}());
exports.RoundDataProvider = RoundDataProvider;
//# sourceMappingURL=data:application/json;base64,