"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var RoundDataProvider = /** @class */ (function () {
    function RoundDataProvider() {
        this.players = [];
        this.teams = [];
        this.answerCount = 1;
    }
    // Return a player that haven't played more than authorizes times
    // Returns null if no elligible player. Hence need to go to summary page
    RoundDataProvider.prototype.getRandomPlayer = function () {
        var elligiblePlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].answerCount < this.answerCount) {
                elligiblePlayers[j] = this.players[i];
                j++;
            }
        }
        if (j == 0) {
            return null;
        }
        else {
            var random = Math.floor(Math.random() * j);
            return elligiblePlayers[random];
        }
    };
    RoundDataProvider.prototype.calculateTeamCount = function () {
        var teamCount = 0;
        if ((this.players.length % 2 == 0 || this.players.length % 3 == 0) && this.players.length > 3) {
            //team creation of 2 or 3 player is possible
            if (this.players.length % 3 == 0) {
                //teams of 3 will be created
                teamCount = this.players.length / 3;
            }
            else {
                //teams of 2 will be created
                teamCount = this.players.length / 2;
            }
            return teamCount;
        }
        else {
            // no team creation is possible
            return 0;
        }
    };
    RoundDataProvider.prototype.getExistingAndRemainingPlayers = function (team) {
        var noTeamPlayers = [];
        var j = 0;
        //populate elligible players array
        for (var i = 0; i < this.players.length; i++) {
            if (this.players[i].team == null /*|| this.players[i].team == team*/) {
                noTeamPlayers[j] = this.players[i];
                j++;
            }
        }
        return noTeamPlayers;
    };
    RoundDataProvider.prototype.clearData = function () {
        console.log("Clearing Data...");
        this.triviaQuestion = null;
        this.currentPlayer = null;
        this.group = null;
        for (var i = 0; i < this.players.length; i++) {
            delete this.players[i];
        }
        for (var i = 0; i < this.teams.length; i++) {
            delete this.teams[i];
        }
        this.players = [];
        this.teams = [];
        this.subjectId = "";
        this.gameMode = "";
    };
    RoundDataProvider = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], RoundDataProvider);
    return RoundDataProvider;
}());
exports.RoundDataProvider = RoundDataProvider;
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmREYXRhLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91bmREYXRhLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBUzNDO0lBZ0JJO1FBWE8sWUFBTyxHQUFjLEVBQUUsQ0FBQztRQUN4QixVQUFLLEdBQVksRUFBRSxDQUFDO1FBUWxCLGdCQUFXLEdBQVUsQ0FBQyxDQUFDO0lBRVYsQ0FBQztJQUV2QixpRUFBaUU7SUFDakUsd0VBQXdFO0lBQ2pFLDJDQUFlLEdBQXRCO1FBQ0ksSUFBSSxnQkFBZ0IsR0FBYyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsa0NBQWtDO1FBQ2xDLEdBQUcsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQztZQUN2QyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBQztnQkFDN0MsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEMsQ0FBQyxFQUFFLENBQUM7WUFDUixDQUFDO1FBQ0wsQ0FBQztRQUVELEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUEsSUFBSSxDQUFBLENBQUM7WUFDRixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUzQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsQ0FBQztJQUNMLENBQUM7SUFFTSw4Q0FBa0IsR0FBekI7UUFDSSxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbEIsRUFBRSxDQUFBLENBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFDLENBQUMsSUFBSSxDQUFDLENBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pGLDRDQUE0QztZQUM1QyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUEsQ0FBQztnQkFDNUIsNEJBQTRCO2dCQUM1QixTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFBQSxJQUFJLENBQUEsQ0FBQztnQkFDRiw0QkFBNEI7Z0JBQzVCLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUM7WUFDdEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFFckIsQ0FBQztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ0YsK0JBQStCO1lBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDO0lBRUwsQ0FBQztJQUVNLDBEQUE4QixHQUFyQyxVQUFzQyxJQUFJO1FBQ3RDLElBQUksYUFBYSxHQUFjLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixrQ0FBa0M7UUFDbEMsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxtQ0FBb0MsQ0FBQyxDQUFBLENBQUM7Z0JBQ2xFLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxDQUFDLEVBQUUsQ0FBQztZQUNSLENBQUM7UUFDTCxDQUFDO1FBRUYsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUN4QixDQUFDO0lBMUVRLGlCQUFpQjtRQUQ3QixpQkFBVSxFQUFFOztPQUNBLGlCQUFpQixDQTJFN0I7SUFBRCx3QkFBQztDQUFBLEFBM0VELElBMkVDO0FBM0VZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5pbXBvcnQge1RyaXZpYVF1ZXN0aW9ufSBmcm9tIFwiLi4vdHJpdmlhUXVlc3Rpb25cIjtcbmltcG9ydCB7VGVhbX0gZnJvbSBcIi4uL3RlYW1cIjtcbmltcG9ydCB7UGxheWVyfSBmcm9tIFwiLi4vcGxheWVyXCI7XG5pbXBvcnQge0dyb3VwfSBmcm9tIFwiLi4vZ3JvdXBcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvdW5kRGF0YVByb3ZpZGVyIHtcbiAgICBcbiAgICBwdWJsaWMgdHJpdmlhUXVlc3Rpb246IFRyaXZpYVF1ZXN0aW9uOyBcbiAgICBwdWJsaWMgY3VycmVudFBsYXllcjogUGxheWVyO1xuICAgIHB1YmxpYyBncm91cDogR3JvdXA7XG4gICAgcHVibGljIHBsYXllcnMgOiBQbGF5ZXJbXSA9IFtdO1xuICAgIHB1YmxpYyB0ZWFtcyA6IFRlYW1bXSA9IFtdO1xuXG4gICAgcHVibGljIHBhdGg6IHN0cmluZztcbiAgICBcbiAgICBwdWJsaWMgc3ViamVjdElkOiBzdHJpbmc7XG4gICAgXG4gICAgcHVibGljIGdhbWVNb2RlOiBzdHJpbmc7XG4gICAgXG4gICAgcmVhZG9ubHkgYW5zd2VyQ291bnQ6bnVtYmVyID0gMTtcbiAgICBcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxuICAgIFxuICAgIC8vIFJldHVybiBhIHBsYXllciB0aGF0IGhhdmVuJ3QgcGxheWVkIG1vcmUgdGhhbiBhdXRob3JpemVzIHRpbWVzXG4gICAgLy8gUmV0dXJucyBudWxsIGlmIG5vIGVsbGlnaWJsZSBwbGF5ZXIuIEhlbmNlIG5lZWQgdG8gZ28gdG8gc3VtbWFyeSBwYWdlXG4gICAgcHVibGljIGdldFJhbmRvbVBsYXllcigpe1xuICAgICAgICB2YXIgZWxsaWdpYmxlUGxheWVycyA6IFBsYXllcltdID0gW107XG4gICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vcG9wdWxhdGUgZWxsaWdpYmxlIHBsYXllcnMgYXJyYXlcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8dGhpcy5wbGF5ZXJzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5wbGF5ZXJzW2ldLmFuc3dlckNvdW50PHRoaXMuYW5zd2VyQ291bnQpe1xuICAgICAgICAgICAgICAgIGVsbGlnaWJsZVBsYXllcnNbal09dGhpcy5wbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoaiA9PSAwKXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBqKTsgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZWxsaWdpYmxlUGxheWVyc1tyYW5kb21dO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBjYWxjdWxhdGVUZWFtQ291bnQoKXtcbiAgICAgICAgbGV0IHRlYW1Db3VudCA9IDA7XG4gICAgICAgIGlmKCAodGhpcy5wbGF5ZXJzLmxlbmd0aCUyID09IDAgfHwgdGhpcy5wbGF5ZXJzLmxlbmd0aCUzID09IDAgKSAmJiB0aGlzLnBsYXllcnMubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgLy90ZWFtIGNyZWF0aW9uIG9mIDIgb3IgMyBwbGF5ZXIgaXMgcG9zc2libGVcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVycy5sZW5ndGglMyA9PSAwICl7XG4gICAgICAgICAgICAgICAgLy90ZWFtcyBvZiAzIHdpbGwgYmUgY3JlYXRlZFxuICAgICAgICAgICAgICAgIHRlYW1Db3VudCA9IHRoaXMucGxheWVycy5sZW5ndGgvMztcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIC8vdGVhbXMgb2YgMiB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICB0ZWFtQ291bnQgPSB0aGlzLnBsYXllcnMubGVuZ3RoLzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGVhbUNvdW50O1xuICAgICAgICAgICAgXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgLy8gbm8gdGVhbSBjcmVhdGlvbiBpcyBwb3NzaWJsZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXRFeGlzdGluZ0FuZFJlbWFpbmluZ1BsYXllcnModGVhbSk6IFBsYXllcltde1xuICAgICAgICB2YXIgbm9UZWFtUGxheWVycyA6IFBsYXllcltdID0gW107XG4gICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vcG9wdWxhdGUgZWxsaWdpYmxlIHBsYXllcnMgYXJyYXlcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8dGhpcy5wbGF5ZXJzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgaWYodGhpcy5wbGF5ZXJzW2ldLnRlYW0gPT0gbnVsbCAvKnx8IHRoaXMucGxheWVyc1tpXS50ZWFtID09IHRlYW0qLyApe1xuICAgICAgICAgICAgICAgIG5vVGVhbVBsYXllcnNbal09dGhpcy5wbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICByZXR1cm4gbm9UZWFtUGxheWVycztcbiAgICB9XG59Il19
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmREYXRhLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91bmREYXRhLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBUzNDO0lBY0k7UUFUTyxZQUFPLEdBQWMsRUFBRSxDQUFDO1FBQ3hCLFVBQUssR0FBWSxFQUFFLENBQUM7UUFNbEIsZ0JBQVcsR0FBVSxDQUFDLENBQUM7SUFFVixDQUFDO0lBRXZCLGlFQUFpRTtJQUNqRSx3RUFBd0U7SUFDakUsMkNBQWUsR0FBdEI7UUFDSSxJQUFJLGdCQUFnQixHQUFjLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixrQ0FBa0M7UUFDbEMsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDO2dCQUM3QyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLEVBQUUsQ0FBQztZQUNSLENBQUM7UUFDTCxDQUFDO1FBRUQsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNGLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRTNDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxD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R0QsSUFpR0M7QUFqR1ksOENBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbmltcG9ydCB7VHJpdmlhUXVlc3Rpb259IGZyb20gXCIuLi90cml2aWFRdWVzdGlvblwiO1xuaW1wb3J0IHtUZWFtfSBmcm9tIFwiLi4vdGVhbVwiO1xuaW1wb3J0IHtQbGF5ZXJ9IGZyb20gXCIuLi9wbGF5ZXJcIjtcbmltcG9ydCB7R3JvdXB9IGZyb20gXCIuLi9ncm91cFwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm91bmREYXRhUHJvdmlkZXIge1xuICAgIFxuICAgIHB1YmxpYyB0cml2aWFRdWVzdGlvbjogVHJpdmlhUXVlc3Rpb247IFxuICAgIHB1YmxpYyBjdXJyZW50UGxheWVyOiBQbGF5ZXI7XG4gICAgcHVibGljIGdyb3VwOiBHcm91cDtcbiAgICBwdWJsaWMgcGxheWVycyA6IFBsYXllcltdID0gW107XG4gICAgcHVibGljIHRlYW1zIDogVGVhbVtdID0gW107XG4gICAgXG4gICAgcHVibGljIHN1YmplY3RJZDogc3RyaW5nO1xuICAgIFxuICAgIHB1YmxpYyBnYW1lTW9kZTogc3RyaW5nO1xuICAgIFxuICAgIHJlYWRvbmx5IGFuc3dlckNvdW50Om51bWJlciA9IDE7XG4gICAgXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cbiAgICBcbiAgICAvLyBSZXR1cm4gYSBwbGF5ZXIgdGhhdCBoYXZlbid0IHBsYXllZCBtb3JlIHRoYW4gYXV0aG9yaXplcyB0aW1lc1xuICAgIC8vIFJldHVybnMgbnVsbCBpZiBubyBlbGxpZ2libGUgcGxheWVyLiBIZW5jZSBuZWVkIHRvIGdvIHRvIHN1bW1hcnkgcGFnZVxuICAgIHB1YmxpYyBnZXRSYW5kb21QbGF5ZXIoKXtcbiAgICAgICAgdmFyIGVsbGlnaWJsZVBsYXllcnMgOiBQbGF5ZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIFxuICAgICAgICAvL3BvcHVsYXRlIGVsbGlnaWJsZSBwbGF5ZXJzIGFycmF5XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMucGxheWVycy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc1tpXS5hbnN3ZXJDb3VudDx0aGlzLmFuc3dlckNvdW50KXtcbiAgICAgICAgICAgICAgICBlbGxpZ2libGVQbGF5ZXJzW2pdPXRoaXMucGxheWVyc1tpXTtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKGogPT0gMCl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaik7ICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGVsbGlnaWJsZVBsYXllcnNbcmFuZG9tXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgY2FsY3VsYXRlVGVhbUNvdW50KCl7XG4gICAgICAgIGxldCB0ZWFtQ291bnQgPSAwO1xuICAgICAgICBpZiggKHRoaXMucGxheWVycy5sZW5ndGglMiA9PSAwIHx8IHRoaXMucGxheWVycy5sZW5ndGglMyA9PSAwICkgJiYgdGhpcy5wbGF5ZXJzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIC8vdGVhbSBjcmVhdGlvbiBvZiAyIG9yIDMgcGxheWVyIGlzIHBvc3NpYmxlXG4gICAgICAgICAgICBpZih0aGlzLnBsYXllcnMubGVuZ3RoJTMgPT0gMCApe1xuICAgICAgICAgICAgICAgIC8vdGVhbXMgb2YgMyB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICB0ZWFtQ291bnQgPSB0aGlzLnBsYXllcnMubGVuZ3RoLzM7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAvL3RlYW1zIG9mIDIgd2lsbCBiZSBjcmVhdGVkXG4gICAgICAgICAgICAgICAgdGVhbUNvdW50ID0gdGhpcy5wbGF5ZXJzLmxlbmd0aC8yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRlYW1Db3VudDtcbiAgICAgICAgICAgIFxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIG5vIHRlYW0gY3JlYXRpb24gaXMgcG9zc2libGVcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0RXhpc3RpbmdBbmRSZW1haW5pbmdQbGF5ZXJzKHRlYW0pOiBQbGF5ZXJbXXtcbiAgICAgICAgdmFyIG5vVGVhbVBsYXllcnMgOiBQbGF5ZXJbXSA9IFtdO1xuICAgICAgICBsZXQgaiA9IDA7XG4gICAgICAgIFxuICAgICAgICAvL3BvcHVsYXRlIGVsbGlnaWJsZSBwbGF5ZXJzIGFycmF5XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMucGxheWVycy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGlmKHRoaXMucGxheWVyc1tpXS50ZWFtID09IG51bGwgLyp8fCB0aGlzLnBsYXllcnNbaV0udGVhbSA9PSB0ZWFtKi8gKXtcbiAgICAgICAgICAgICAgICBub1RlYW1QbGF5ZXJzW2pdPXRoaXMucGxheWVyc1tpXTtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgcmV0dXJuIG5vVGVhbVBsYXllcnM7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgY2xlYXJEYXRhKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYXJpbmcgRGF0YS4uLlwiKTtcbiAgICAgICAgdGhpcy50cml2aWFRdWVzdGlvbiA9IG51bGw7IFxuICAgICAgICB0aGlzLmN1cnJlbnRQbGF5ZXI9IG51bGw7XG4gICAgICAgIHRoaXMuZ3JvdXA9IG51bGw7XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8dGhpcy5wbGF5ZXJzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucGxheWVyc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPHRoaXMudGVhbXMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy50ZWFtc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVycz0gW107XG4gICAgICAgIHRoaXMudGVhbXM9IFtdO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdWJqZWN0SWQ9IFwiXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmdhbWVNb2RlPSBcIlwiO1xuICAgIH1cbiAgICAgICAgXG59Il19
>>>>>>> 1559dd2277de16168f97b0e95a7e8ca40b94c521
